




Eigen::Matrix3d computeTransformationMatrix(const Eigen::Matrix3d& jacobianMatrix)
{
	Eigen::Matrix3d transformation_matrix = Eigen::Matrix3d::Zero();

	// Step 1: Compute V3 = cross product of row 0 and row 1 of JC
	double v31 = jacobianMatrix(0, 1) * jacobianMatrix(1, 2) - jacobianMatrix(0, 2) * jacobianMatrix(1, 1);
	double v32 = jacobianMatrix(0, 2) * jacobianMatrix(1, 0) - jacobianMatrix(0, 0) * jacobianMatrix(1, 2);
	double v33 = jacobianMatrix(0, 0) * jacobianMatrix(1, 1) - jacobianMatrix(0, 1) * jacobianMatrix(1, 0);
	double av3 = std::sqrt(v31 * v31 + v32 * v32 + v33 * v33);

	// Third column of TIC
	transformation_matrix(0, 2) = v31 / av3;
	transformation_matrix(1, 2) = v32 / av3;
	transformation_matrix(2, 2) = v33 / av3;

	// Step 2: Compute V1 = cross product of row 1 of JC and V3
	double v11 = jacobianMatrix(1, 1) * v33 - jacobianMatrix(1, 2) * v32;
	double v12 = jacobianMatrix(1, 2) * v31 - jacobianMatrix(1, 0) * v33;
	double v13 = jacobianMatrix(1, 0) * v32 - jacobianMatrix(1, 1) * v31;

	// Step 3: Compute V2 = cross product of V3 and V1
	double v21 = v32 * v13 - v33 * v12;
	double v22 = v33 * v11 - v31 * v13;
	double v23 = v31 * v12 - v32 * v11;

	// Normalize V1
	double av1 = std::sqrt(v11 * v11 + v12 * v12 + v13 * v13);
	transformation_matrix(0, 0) = v11 / av1;
	transformation_matrix(1, 0) = v12 / av1;
	transformation_matrix(2, 0) = v13 / av1;

	// Normalize V2
	double av2 = std::sqrt(v21 * v21 + v22 * v22 + v23 * v23);
	transformation_matrix(0, 1) = v21 / av2;
	transformation_matrix(1, 1) = v22 / av2;
	transformation_matrix(2, 1) = v23 / av2;

	return transformation_matrix;


}







	void computeBMatrixMainShapeFunction(const double& thickness, const std::array<Eigen::Matrix3d, 4>& p_matrix_local, 
		const Eigen::Vector3d& ref_vector,
		Eigen::MatrixXd& StrainDisplacementMatrixMainShapeFunction);




		


void quadMITC4_element::computeBMatrixMainShapeFunction(const double& thickness,
	const  std::array<Eigen::Matrix3d, 4>& p_matrix_local, const Eigen::Vector3d& ref_vector,
	Eigen::MatrixXd& StrainDisplacementMatrixMainShapeFunction)
{
		
	double integration_ptx = 0.0;
	double integration_pty = 0.0;
	double integration_ptz = 0.0;

	// At zeroth point
	Eigen::Vector4d shapeFunction = Eigen::Vector4d::Zero(); // Shape function
	Eigen::MatrixXd shapefunction_firstDerivativeMatrix = Eigen::MatrixXd::Zero(2, 4); // Shape function First derivative
	Eigen::Matrix3d jacobianMatrix = Eigen::Matrix3d::Zero(); // Jacobian Matrix

	computeShapeFunctonNJacobianMatrix(0.0, 0.0, 0.0, 
		thickness, p_matrix_local,
		shapeFunction, shapefunction_firstDerivativeMatrix, jacobianMatrix);


	Eigen::Matrix3d initial_transformation_matrix = computeInitialTransformationMatrix(jacobianMatrix);


	// Compute the Transverse shear strain matrix
	Eigen::MatrixXd TransverseShearStrainMatrix = computeTransverseShearStrainMatrix(thickness, p_matrix_local);

	// Store the strain displacement matrix at main shape function    
	StrainDisplacementMatrixMainShapeFunction = Eigen::MatrixXd::Zero(5, 28);


	for (int i = 0; i < 2; i++)
	{
		// integration point z
		integration_ptz = -1.0 * this->integration_points(i, 0);

		for (int j = 0; j < 2; j++)
		{
			// integration point y
			integration_pty = this->integration_points(j, 0);

			for (int k = 0; k < 2; k++)
			{
				// integration point x
				integration_ptx = (integration_pty < 0.0) ? +this->integration_points(k, 0)
					: -1.0 * this->integration_points(k, 0);


				// Compute Strain Displacement Matrix(B) for numerical integration pont
				// having local coordinates integration_ptx, integration_pty and integration_ptz

				Eigen::MatrixXd StrainDisplacementMatrixAtIntegrationPt = Eigen::MatrixXd::Zero(6, 28);
				Eigen::MatrixXd transformation_matrix_phi = Eigen::MatrixXd::Zero(5, 6);
				Eigen::Vector4d shapeFunction = Eigen::Vector4d::Zero(); // Shape function
				double jacobian_determinant = 0.0;

				computeMainStrainDisplacementMatrix(integration_ptx, integration_pty, integration_ptz,
					thickness,p_matrix_local, ref_vector, TransverseShearStrainMatrix, initial_transformation_matrix,
					jacobian_determinant, shapeFunction,
					StrainDisplacementMatrixAtIntegrationPt, transformation_matrix_phi);



				// Transform B to BL: BL = PHI * B_column
				Eigen::MatrixXd bl_matrix = Eigen::MatrixXd::Zero(5, 28);

				bl_matrix = transformation_matrix_phi * StrainDisplacementMatrixAtIntegrationPt; 

				// Accumulate to the Strain Displacement Matrix of Main Shape Function
				StrainDisplacementMatrixMainShapeFunction.noalias() = StrainDisplacementMatrixMainShapeFunction + bl_matrix;

			}
		}
	}


}







	void compute_B_matrix(
		int ID,
		const Eigen::Vector4d& shape_function_values,                // N(1..4)
		const Eigen::MatrixXd& shapefunction_firstDerivativeMatrix,  // 2x4
		const Eigen::Matrix3d& jacobianMatrix,                       // 3x3
		const std::array<Eigen::Matrix3d, 4>& p_matrix_local,        // P(:,:,i) 4 (3x3)
		const Eigen::MatrixXd& jacobianMatrixbb2,                    // 4x24 (bb2)
		const Eigen::Matrix3d& transformation_matrix,                // TIC
		const double& xp, const double& yp, const double& zp, const double& zp0,
		const double& thickness,
		Eigen::MatrixXd& B_matrix                                    // 6x28 (output)
	);








void quadMITC4_element::compute_B_matrix(
	int ID,
	const Eigen::Vector4d& shape_function_values,                // N(1..4)
	const Eigen::MatrixXd& shapefunction_firstDerivativeMatrix,  // 2x4
	const Eigen::Matrix3d& jacobianMatrix,                       // 3x3
	const std::array<Eigen::Matrix3d, 4>& p_matrix_local,        // P(:,:,i) 4 (3x3)
	const Eigen::MatrixXd& jacobianMatrixbb2,                    // 4x24 (bb2)
	const Eigen::Matrix3d& transformation_matrix,                // TIC
	const double& xp, const double& yp, const double& zp, const double& zp0,
	const double& thickness,
	Eigen::MatrixXd& B_matrix                                    // 6x28 (output)
)
{
	B_matrix = Eigen::MatrixXd::Zero(6, 28);

	if (ID == 1)
	{
		// Only extra shape functions part
		double GT11 = (jacobianMatrix.row(0).dot(transformation_matrix.col(0)));
		double GT12 = (jacobianMatrix.row(0).dot(transformation_matrix.col(1)));
		double GT21 = (jacobianMatrix.row(1).dot(transformation_matrix.col(0)));
		double GT22 = (jacobianMatrix.row(1).dot(transformation_matrix.col(1)));

		B_matrix(0, 24) = -2.0 * xp * GT11;
		B_matrix(0, 25) = -2.0 * xp * GT12;
		B_matrix(1, 26) = -2.0 * yp * GT21;
		B_matrix(1, 27) = -2.0 * yp * GT22;
		B_matrix(3, 24) = -xp * GT21;
		B_matrix(3, 25) = -xp * GT22;
		B_matrix(3, 26) = -yp * GT11;
		B_matrix(3, 27) = -yp * GT12;
		return;
	}

	for (int i = 0; i < 4; i++)
	{
		int ii = 6 * i;
		const Eigen::Matrix3d& P = p_matrix_local[i];

		double dn1 = shapefunction_firstDerivativeMatrix(0, i);
		double dn2 = shapefunction_firstDerivativeMatrix(1, i);
		double N = shape_function_values(i);

		// Row 1
		B_matrix(0, ii + 0) = dn1 * jacobianMatrix(0, 0);
		B_matrix(0, ii + 1) = dn1 * jacobianMatrix(0, 1);
		B_matrix(0, ii + 2) = dn1 * jacobianMatrix(0, 2);
		double GV22 = jacobianMatrix.row(0).dot(P.col(1));
		B_matrix(0, ii + 3) = -(zp - zp0) * dn1 * GV22 * thickness / 2.0;
		double GV21 = jacobianMatrix.row(0).dot(P.col(0));
		B_matrix(0, ii + 4) = (zp - zp0) * dn1 * GV21 * thickness / 2.0;

		// Row 2
		B_matrix(1, ii + 0) = dn2 * jacobianMatrix(1, 0);
		B_matrix(1, ii + 1) = dn2 * jacobianMatrix(1, 1);
		B_matrix(1, ii + 2) = dn2 * jacobianMatrix(1, 2);
		GV22 = jacobianMatrix.row(1).dot(P.col(1));
		B_matrix(1, ii + 3) = -(zp - zp0) * dn2 * GV22 * thickness / 2.0;
		GV21 = jacobianMatrix.row(1).dot(P.col(0));
		B_matrix(1, ii + 4) = (zp - zp0) * dn2 * GV21 * thickness / 2.0;

		// Row 3
		GV22 = jacobianMatrix.row(2).dot(P.col(1));
		GV21 = jacobianMatrix.row(2).dot(P.col(0));
		B_matrix(2, ii + 3) = -N * GV22 * thickness / 2.0;
		B_matrix(2, ii + 4) = N * GV21 * thickness / 2.0;

		// Row 4
		B_matrix(3, ii + 0) = 0.5 * (dn1 * jacobianMatrix(1, 0) + dn2 * jacobianMatrix(0, 0));
		B_matrix(3, ii + 1) = 0.5 * (dn1 * jacobianMatrix(1, 1) + dn2 * jacobianMatrix(0, 1));
		B_matrix(3, ii + 2) = 0.5 * (dn1 * jacobianMatrix(1, 2) + dn2 * jacobianMatrix(0, 2));
		double GV21_alt = jacobianMatrix.row(0).dot(P.col(1));
		double GV22_alt = jacobianMatrix.row(1).dot(P.col(1));
		B_matrix(3, ii + 3) = -(zp - zp0) * (dn2 * GV21_alt + dn1 * GV22_alt) * thickness / 4.0;

		double GV11 = jacobianMatrix.row(0).dot(P.col(0));
		double GV12 = jacobianMatrix.row(1).dot(P.col(0));
		B_matrix(3, ii + 4) = (zp - zp0) * (dn2 * GV11 + dn1 * GV12) * thickness / 4.0;
	}

	// Rows 5 and 6 (using jacobianMatrix2 / BB)
	for (int j = 0; j < 24; j++)
	{
		B_matrix(4, j) = 0.5 * ((1.0 - xp) * jacobianMatrixbb2(0, j) + (1.0 + xp) * jacobianMatrixbb2(1, j));
		B_matrix(5, j) = 0.5 * ((1.0 - yp) * jacobianMatrixbb2(2, j) + (1.0 + yp) * jacobianMatrixbb2(3, j));
	}

	// Extra shape functions (always calculated)
	double GT11 = jacobianMatrix.row(0).dot(transformation_matrix.col(0));
	double GT12 = jacobianMatrix.row(0).dot(transformation_matrix.col(1));
	double GT21 = jacobianMatrix.row(1).dot(transformation_matrix.col(0));
	double GT22 = jacobianMatrix.row(1).dot(transformation_matrix.col(1));

	B_matrix(0, 24) = -2.0 * xp * GT11;
	B_matrix(0, 25) = -2.0 * xp * GT12;
	B_matrix(1, 26) = -2.0 * yp * GT21;
	B_matrix(1, 27) = -2.0 * yp * GT22;
	B_matrix(3, 24) = -xp * GT21;
	B_matrix(3, 25) = -xp * GT22;
	B_matrix(3, 26) = -yp * GT11;
	B_matrix(3, 27) = -yp * GT12;


}








void quadMITC4_element::transform_matrix_to_global(Eigen::MatrixXd& stiffness_matrix,
	const std::array<Eigen::Matrix3d, 4>& p_matrix_local)
{
	// Transform to global co-ordinates
	// E_global = P^T x E_local x P

	// K is 24×24, P has 4 rotation matrices (one per node)
	// Loop over each node block
	for (int i = 0; i < 4; i++) 
	{
		const int base = i * 6;
		const Eigen::Matrix3d& p_matrix_i = p_matrix_local[i];
		const Eigen::Matrix3d& p_matrix_i_Transpose = p_matrix_i.transpose();


		// 1) Off-diagonal blocks: translation×rotation (3×3 rows × 3×3 cols)
		for (int j = 0; j < 3; j++) 
		{
			int row = base + j;  // EK row index

			for (int k = i; k < 4; k++) 
			{
				int colBase = (k * 6) + 3; // translation rows coupling with rotation columns

				// Extract U/V/W-to-rot block into terc-vector
				Eigen::Vector3d vec1 = stiffness_matrix.block<1, 3>(row, colBase).transpose();

				// Transform via T matrix
				Eigen::Vector3d transformed = p_matrix_i * vec1;

				// Place back transformed values
				stiffness_matrix.block<1, 3>(row, colBase) = transformed.transpose();

				if (i != j)
				{
					stiffness_matrix.block<1, 3>((k * 6) + j, (i * 6) + 3) = transformed.transpose();
				}

			}
		}

		// 2) Diagonal 6×6 block: full rotation
		auto diag = stiffness_matrix.block<6, 6>(base, base);
		Eigen::Matrix<double, 6, 6> R = Eigen::Matrix<double, 6, 6>::Zero();


		R.topLeftCorner<3, 3>() = p_matrix_i_Transpose * diag.topLeftCorner<3, 3>() * p_matrix_i;
		R.bottomRightCorner<3, 3>() = p_matrix_i_Transpose * diag.bottomRightCorner<3, 3>() * p_matrix_i;
		// Cross terms: translation × rotation
		R.topRightCorner<3, 3>() = p_matrix_i_Transpose * diag.topRightCorner<3, 3>() * p_matrix_i;
		R.bottomLeftCorner<3, 3>() = p_matrix_i_Transpose * diag.bottomLeftCorner<3, 3>() * p_matrix_i;

		stiffness_matrix.block<6, 6>(base, base) = R;


		// 3) Off-diagonal blocks below diagonal
		for (int j = i + 1; j < 4; j++) 
		{
			int colBlock = j * 6;
			auto C = stiffness_matrix.block<6, 6>(base, colBlock);
			const auto& p_matrix_j = p_matrix_local[j];

			// Extract sub-blocks
			Eigen::Matrix3d C00 = C.topLeftCorner<3, 3>();
			Eigen::Matrix3d C01 = C.topRightCorner<3, 3>();
			Eigen::Matrix3d C10 = C.bottomLeftCorner<3, 3>();
			Eigen::Matrix3d C11 = C.bottomRightCorner<3, 3>();

			// Apply transformations
			C.topLeftCorner<3, 3>() = p_matrix_i_Transpose * C00 * p_matrix_j;
			C.topRightCorner<3, 3>() = p_matrix_i_Transpose * C01 * p_matrix_j;
			C.bottomLeftCorner<3, 3>() = p_matrix_i_Transpose * C10 * p_matrix_j;
			C.bottomRightCorner<3, 3>() = p_matrix_i_Transpose * C11 * p_matrix_j;


			stiffness_matrix.block<6, 6>(base, colBlock) = C;
			stiffness_matrix.block<6, 6>(colBlock, base) = C.transpose();  // Ensure symmetry
		}
	}


}








